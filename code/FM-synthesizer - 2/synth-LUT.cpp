
/*
	Syntherklaas FM -- Global lookup tables.
*/

#include "synth-global.h"
// #include "synth-LUT.h"

namespace SFM
{
/*
	// Source: https://www.gearslutz.com/board/electronic-music-instruments-and-electronic-music-production/1166873-fm-operator-frequency-ratios.html
	float g_modRatioLUT[] {
		0.50f, 0.71f, 0.78f, 0.87f, 1.00f, 1.41f, 1.57f, 1.73f, 
		2.00f, 2.82f, 3.00f, 3.14f, 3.46f, 4.00f, 4.24f, 4.71f, 
		5.00f, 5.19f, 5.65f, 6.00f, 6.28f, 6.92f, 7.00f, 7.07f, 
		7.85f, 8.00f, 8.48f, 8.65f, 9.00f, 9.42f, 9.89f, 10.00f,
		10.38f, 10.99f, 11.00f, 11.30f, 12.00f, 12.11f, 12.56f, 
		12.72f, 13.00f, 13.84f, 14.00f, 14.10f, 14.13f, 15.00f, 
		15.55f, 15.57f, 15.70f, 16.96f, 17.27f, 17.30f, 18.37f, 
		18.84f, 19.03f, 19.78f, 20.41f, 20.76f, 21.20f, 21.98f, 
		22.49, 23.55f, 24.22f, 25.95f
	};

	// "The Computer Music Tutorial mentions that ratios that are near to but not right on integer ratios sound more natural, or less synthethic, especially when you involve more operators. 
	//  There is a fair bit of info in it on FM synthesis."
	

	size_t g_numModRatios = sizeof(g_modRatioLUT)/sizeof(float);
*/

	// Farey sequences
	// Source: http://noyzelab.blogspot.com/2016/04/farey-sequence-tables-for-fm-synthesis.html

/*
	// Order 9
	unsigned g_CM[][2] = {
		{1, 1},
		{1, 2},
		{1, 3},
		{1, 4},
		{1, 5}, {2, 5},
		{1, 6},
		{1, 7}, {2, 7}, {3, 7},
		{1, 8}, {3, 8},
		{1, 9}, {2, 9}, {4, 9}
	};
*/

/* 
	Too many values for a 7-bit MIDI control :)

	// Order 31
	unsigned g_CM[][2] = {
		{1, 1},
		{1, 2},
		{1, 3}, {2, 3},
		{1, 4}, {3, 4},
		{1, 5}, {2, 5}, {3, 5}, {4, 5},
		{1, 6}, {5, 6},
		{1, 7}, {2, 7}, {3, 7}, {4, 7}, {5, 7}, {6, 7},
		{1, 8}, {3, 8}, {5, 8}, {7, 8},
		{1, 9}, {2, 9}, {4, 9}, {5, 9}, {7, 9}, {8, 9},
		{1, 10}, {3, 10}, {7, 10}, {9, 10},
		{1, 11}, {2, 11}, {3, 11}, {4, 11}, {5, 11}, {6, 11}, {7, 11}, {8, 11}, {9, 11}, {10, 11},
		{1, 12}, {5, 12}, {7, 12}, {11, 12},
		{1, 13}, {2, 13}, {3, 13}, {4, 13}, {5, 13}, {6, 13}, {7, 13}, {8, 13}, {9, 13}, {10, 13}, {11, 13}, {12, 13},
		{1, 14}, {3, 14}, {5, 14}, {9, 14}, {11, 14}, {13, 14},
		{1, 15}, {2, 15}, {4, 15}, {7, 15}, {8, 15}, {11, 15}, {13, 15}, {14, 15},
		{1, 16}, {3, 16}, {5, 16}, {7, 16}, {9, 16}, {11, 16}, {13, 16}, {15, 16},
		{1, 17}, {2, 17}, {3, 17}, {4, 17}, {5, 17}, {6, 17}, {7, 17}, {8, 17}, {9, 17}, {10, 17}, {11, 17}, {12, 17}, {13, 17}, {14, 17}, {15, 17}, {16, 17},
		{1, 18}, {5, 18}, {7, 18}, {11, 18}, {13, 18}, {17, 18},
		{1, 19}, {2, 19}, {3, 19}, {4, 19}, {5, 19}, {6, 19}, {7, 19}, {8, 19}, {9, 19}, {10, 19}, {11, 19}, {12, 19}, {13, 19}, {14, 19}, {15, 19}, {16, 19}, {17, 19}, {18, 19},
		{1, 20}, {3, 20}, {7, 20}, {9, 20}, {11, 20}, {13, 20}, {17, 20}, {19, 20},
		{1, 21}, {2, 21}, {4, 21}, {5, 21}, {8, 21}, {10, 21}, {11, 21}, {13, 21}, {16, 21}, {17, 21}, {19, 21}, {20, 21},
		{1, 22}, {3, 22}, {5, 22}, {7, 22}, {9, 22}, {13, 22}, {15, 22}, {17, 22}, {19, 22}, {21, 22},
		{1, 23}, {2, 23}, {3, 23}, {4, 23}, {5, 23}, {6, 23}, {7, 23}, {8, 23}, {9, 23}, {10, 23}, {11, 23}, {12, 23}, {13, 23}, {14, 23}, {15, 23}, {16, 23}, {17, 23}, {18, 23}, {19, 23}, {20, 23}, {21, 23}, {22, 23},
		{1, 24}, {5, 24}, {7, 24}, {11, 24}, {13, 24}, {17, 24}, {19, 24}, {23, 24},
		{1, 25}, {2, 25}, {3, 25}, {4, 25}, {6, 25}, {7, 25}, {8, 25}, {9, 25}, {11, 25}, {12, 25}, {13, 25}, {14, 25}, {16, 25}, {17, 25}, {18, 25}, {19, 25}, {21, 25}, {22, 25}, {23, 25}, {24, 25},
		{1, 26}, {3, 26}, {5, 26}, {7, 26}, {9, 26}, {11, 26}, {15, 26}, {17, 26}, {19, 26}, {21, 26}, {23, 26}, {25, 26},
		{1, 27}, {2, 27}, {4, 27}, {5, 27}, {7, 27}, {8, 27}, {10, 27}, {11, 27}, {13, 27}, {14, 27}, {16, 27}, {17, 27}, {19, 27}, {20, 27}, {22, 27}, {23, 27}, {25, 27}, {26, 27},
		{1, 28}, {3, 28}, {5, 28}, {9, 28}, {11, 28}, {13, 28}, {15, 28}, {17, 28}, {19, 28}, {23, 28}, {25, 28}, {27, 28},
		{1, 29}, {2, 29}, {3, 29}, {4, 29}, {5, 29}, {6, 29}, {7, 29}, {8, 29}, {9, 29}, {10, 29}, {11, 29}, {12, 29}, {13, 29}, {14, 29}, {15, 29}, {16, 29}, {17, 29}, {18, 29}, {19, 29}, {20, 29}, {21, 29}, {22, 29}, {23, 29}, {24, 29}, {25, 29}, {26, 29}, {27, 29}, {28, 29},
		{1, 30}, {7, 30}, {11, 30}, {13, 30}, {17, 30}, {19, 30}, {23, 30}, {29, 30},
		{1, 31}, {2, 31}, {3, 31}, {4, 31}, {5, 31}, {6, 31}, {7, 31}, {8, 31}, {9, 31}, {10, 31}, {11, 31}, {12, 31}, {13, 31}, {14, 31}, {15, 31}, {16, 31}, {17, 31}, {18, 31}, {19, 31}, {20, 31}, {21, 31}, {22, 31}, {23, 31}, {24, 31}, {25, 31}, {26, 31}, {27, 31}, {28, 31}, {29, 31}, {30, 31}
	};
*/

	// Order 15
	unsigned g_CM[][2] = {
		{1, 1},
		{1, 2},
		{1, 3}, {2, 3},
		{1, 4}, {3, 4},
		{1, 5}, {2, 5}, {3, 5}, {4, 5},
		{1, 6}, {5, 6},
		{1, 7}, {2, 7}, {3, 7}, {4, 7}, {5, 7}, {6, 7},
		{1, 8}, {3, 8}, {5, 8}, {7, 8},
		{1, 9}, {2, 9}, {4, 9}, {5, 9}, {7, 9}, {8, 9},
		{1, 10}, {3, 10}, {7, 10}, {9, 10},
		{1, 11}, {2, 11}, {3, 11}, {4, 11}, {5, 11}, {6, 11}, {7, 11}, {8, 11}, {9, 11}, {10, 11},
		{1, 12}, {5, 12}, {7, 12}, {11, 12},
		{1, 13}, {2, 13}, {3, 13}, {4, 13}, {5, 13}, {6, 13}, {7, 13}, {8, 13}, {9, 13}, {10, 13}, {11, 13}, {12, 13},
		{1, 14}, {3, 14}, {5, 14}, {9, 14}, {11, 14}, {13, 14},
		{1, 15}, {2, 15}, {4, 15}, {7, 15}, {8, 15}, {11, 15}, {13, 15}, {14, 15}
	};

	unsigned g_CM_size = sizeof(g_CM)/(2*sizeof(unsigned));

	// Straight ratio table
	float g_opRatioLUT[32];
	size_t g_opRatioLUT_size = sizeof(g_opRatioLUT)/sizeof(unsigned);

	// Sinus
	alignas(16) float g_sinLUT[kOscLUTSize];

	/*
		Depending on target platform/hardware I may want to dump this to disk/ROM.
		Also, in reality, I only neet 1/4th of it.
	*/

	void CalculateLUTs()
	{
		/*
			Calc. straight FM ratio LUT 

			This is, supposedly (FIXME: research), what the DX7 does.
		*/

		g_opRatioLUT[0] = 0.5f;
		for (unsigned iRatio = 1; iRatio < 32; ++iRatio)
		{
			g_opRatioLUT[iRatio] = powf(2.f, (float) iRatio);
		}

		/* 
			Gordon-Smith oscillator (sine wave generator)
		*/

		const float frequency = 1.f;
		const float theta = k2PI*frequency/kOscLUTSize;
		const float epsilon = 2.f*sinf(theta/2.f);
		
		float N, prevN = sinf(-1.f*theta);
		float Q, prevQ = cosf(-1.f*theta);

		for (unsigned iStep = 0; iStep < kOscLUTSize; ++iStep)
		{
			Q = prevQ - epsilon*prevN;
			N = epsilon*Q + prevN;
			prevQ = Q;
			prevN = N;
			g_sinLUT[iStep] = Clamp(N);
		}
	}
}

